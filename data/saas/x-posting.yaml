# X投稿管理システム

- id: x-posting
  category: 7
  category_name: SNS・マーケティング
  title: X投稿管理
  private: true
  required_roles: ["admin", "member"]
  content: |
    X（旧Twitter）への投稿を管理するシステムです。スレッド投稿では概要が100文字ごとに自動分割されます。
  
  custom_html: |
    <style>
      .x-posting-container {
        background: var(--card);
        border-radius: 12px;
        padding: 24px;
        margin: 20px 0;
        max-width: 800px;
        margin: 0 auto;
      }
      
      .x-header {
        margin-bottom: 30px;
        border-bottom: 1px solid var(--border);
        padding-bottom: 20px;
      }
      
      .x-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text);
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
      }
      
      .x-logo {
        width: 32px;
        height: 32px;
      }
      
      .x-description {
        color: var(--text-weak);
        font-size: 0.95rem;
      }
      
      
      .post-form {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }
      
      .form-group {
        display: flex;
        flex-direction: column;
      }
      
      .form-label {
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--text);
        margin-bottom: 8px;
      }
      
      .text-input {
        width: 100%;
        min-height: 120px;
        padding: 12px;
        border: 1px solid var(--border);
        border-radius: 8px;
        background: var(--sidebar-bg);
        color: var(--text);
        font-size: 1rem;
        font-family: inherit;
        resize: vertical;
        transition: border-color 0.3s ease;
      }
      
      .description-input {
        width: 100%;
        min-height: 80px;
        padding: 12px;
        border: 1px solid var(--border);
        border-radius: 8px;
        background: var(--sidebar-bg);
        color: var(--text);
        font-size: 0.95rem;
        font-family: inherit;
        resize: vertical;
        transition: border-color 0.3s ease;
      }
      
      .text-input:focus {
        border-color: #1da1f2;
        outline: none;
      }
      
      select.text-input {
        min-height: 44px;
        height: 44px;
        padding: 8px 12px;
        cursor: pointer;
      }
      
      .char-counter {
        margin-top: 8px;
        font-size: 0.85rem;
        color: var(--text-weak);
        text-align: right;
      }
      
      .char-counter.warning {
        color: #ff9800;
      }
      
      .char-counter.error {
        color: #f44336;
      }
      
      .media-upload {
        border: 2px dashed var(--border);
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        background: var(--sidebar-bg);
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
      }
      
      .media-upload:hover {
        border-color: #1da1f2;
        background: rgba(29, 161, 242, 0.05);
      }
      
      .media-upload.dragover {
        border-color: #1da1f2;
        background: rgba(29, 161, 242, 0.1);
      }
      
      .media-upload-input {
        display: none;
      }
      
      .media-upload-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        cursor: pointer;
      }
      
      .upload-icon {
        font-size: 2.5rem;
      }
      
      .upload-text {
        color: var(--text);
        font-size: 0.95rem;
      }
      
      .upload-hint {
        color: var(--text-weak);
        font-size: 0.85rem;
      }
      
      .media-preview {
        margin-top: 15px;
        border-radius: 8px;
        overflow: hidden;
        position: relative;
      }
      
      .media-preview video {
        width: 100%;
        max-height: 400px;
        border-radius: 8px;
      }
      
      .media-remove {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.3s ease;
      }
      
      .media-remove:hover {
        background: rgba(0, 0, 0, 0.9);
      }
      
      .button-group {
        display: flex;
        gap: 12px;
        margin-top: 10px;
      }
      
      .post-button {
        flex: 1;
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      
      .post-button.primary {
        background: #1da1f2;
        color: white;
      }
      
      .post-button.primary:hover:not(:disabled) {
        background: #1a8cd8;
        transform: translateY(-1px);
      }
      
      .post-button.secondary {
        background: var(--sidebar-bg);
        color: var(--text);
        border: 1px solid var(--border);
      }
      
      .post-button.secondary:hover {
        background: var(--card);
      }
      
      .post-button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        min-height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .status-message {
        padding: 12px;
        border-radius: 8px;
        margin-top: 20px;
        font-size: 0.95rem;
        display: none;
        position: relative;
        z-index: 1000;
        font-weight: 600;
      }
      
      .status-message.success {
        background: rgba(76, 175, 80, 0.2);
        border: 2px solid #4caf50;
        color: #2e7d32;
        display: block;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
        animation: slideIn 0.3s ease-out;
      }
      
      .status-message.error {
        background: rgba(244, 67, 54, 0.1);
        border: 1px solid #f44336;
        color: #f44336;
        display: block;
      }
      
      .status-message.info {
        background: rgba(29, 161, 242, 0.1);
        border: 1px solid #1da1f2;
        color: #1da1f2;
        display: block;
      }
      
      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateY(-20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .loading-text {
        animation: blink 1s infinite;
      }
      
      @keyframes blink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0.3; }
      }
    </style>
    
    <div class="x-posting-container">
      <div class="x-header">
        <h1 class="x-title">
          <svg class="x-logo" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
          </svg>
          投稿管理
        </h1>
        <p class="x-description">
          複数のXアカウントから投稿を管理できます。テキストと動画の投稿に対応しています。
        </p>
      </div>
      
      <div class="post-form">
        
        <div class="form-group">
          <label class="form-label">アカウント選択</label>
          <select id="accountSelect" class="text-input">
            <option value="">アカウントを選択してください</option>
            <option value="TEST">TEST</option>
            <option value="CODEJA">CODEJA</option>
            <option value="CODEEN">CODEEN</option>
            <option value="OSJA">OSJA</option>
            <option value="OSEN">OSEN</option>
          </select>
        </div>
        
        <div class="form-group">
          <label class="form-label">投稿内容</label>
          <textarea 
            id="postText" 
            class="text-input" 
            placeholder="投稿する内容を入力してください..."
            maxlength="140"
          ></textarea>
          <div id="charCounter" class="char-counter">0 / 140</div>
        </div>
        
        <div class="form-group">
          <label class="form-label">
            <input type="checkbox" id="enableThread" /> スレッド投稿を有効にする
          </label>
        </div>
        
        <div class="form-group" id="descriptionGroup" style="display: none;">
          <label class="form-label">概要（スレッド投稿時）</label>
          <textarea 
            id="postDescription" 
            class="description-input" 
            placeholder="動画の概要を入力（100文字ごとに分割してスレッド投稿されます）..."
            maxlength="500"
          ></textarea>
          <div id="descCharCounter" class="char-counter">0 / 500</div>
        </div>
        
        <div class="form-group">
          <label class="form-label">動画を追加（オプション）</label>
          <div id="mediaUpload" class="media-upload">
            <input 
              type="file" 
              id="mediaInput" 
              class="media-upload-input" 
              accept="video/mp4,video/quicktime,video/webm"
            />
            <label for="mediaInput" class="media-upload-label">
              <span class="upload-icon">🎥</span>
              <span class="upload-text">クリックして動画を選択</span>
              <span class="upload-hint">またはここにドラッグ＆ドロップ（MP4, MOV, WebM）</span>
            </label>
            <div id="mediaPreview" class="media-preview" style="display: none;">
              <video id="previewVideo" controls></video>
              <button id="removeMedia" class="media-remove">✕</button>
            </div>
          </div>
        </div>
        
        <div class="button-group">
          <button id="clearButton" class="post-button secondary">
            クリア
          </button>
          <button id="postButton" class="post-button primary">
            投稿する
          </button>
        </div>
        
        <div id="statusMessage" class="status-message"></div>
      </div>
    </div>
    
    <script>
      (function() {
        // 要素の取得
        const accountSelect = document.getElementById('accountSelect');
        const postText = document.getElementById('postText');
        const charCounter = document.getElementById('charCounter');
        const enableThread = document.getElementById('enableThread');
        const descriptionGroup = document.getElementById('descriptionGroup');
        const postDescription = document.getElementById('postDescription');
        const descCharCounter = document.getElementById('descCharCounter');
        const mediaUpload = document.getElementById('mediaUpload');
        const mediaInput = document.getElementById('mediaInput');
        const mediaPreview = document.getElementById('mediaPreview');
        const previewVideo = document.getElementById('previewVideo');
        const removeMedia = document.getElementById('removeMedia');
        const clearButton = document.getElementById('clearButton');
        const postButton = document.getElementById('postButton');
        const statusMessage = document.getElementById('statusMessage');
        
        let selectedFile = null;
        let apiBaseUrl = '';
        
        // 環境設定の読み込み（オプショナル）
        async function loadConfig() {
          // 開発環境の可能性があるAPIサーバーのURLリスト
          const possibleApiUrls = [
            'http://localhost:3001',
            'http://localhost:3000', 
            'http://localhost:8080',
            ''  // 相対パス（本番環境）
          ];
          
          for (const baseUrl of possibleApiUrls) {
            try {
              const configUrl = baseUrl ? `${baseUrl}/api/config` : '/api/config';
              const response = await fetch(configUrl);
              
              if (response.ok) {
                const config = await response.json();
                apiBaseUrl = config.apiBaseUrl || baseUrl;
                console.log('設定読み込み成功:', { configUrl, config, apiBaseUrl });
                return; // 成功したら終了
              }
            } catch (error) {
              console.log(`${baseUrl || '相対パス'} での設定取得失敗:`, error.message);
            }
          }
          
          // 全て失敗した場合は相対パスで動作
          console.log('全ての設定API取得に失敗、相対パスで動作');
          apiBaseUrl = '';
        }
        
        // 初期化時に設定を読み込み
        loadConfig();
        
        // スレッド投稿の切り替え
        enableThread.addEventListener('change', function() {
          descriptionGroup.style.display = this.checked ? 'block' : 'none';
        });
        
        // 文字数カウンター（日本語対応）
        postText.addEventListener('input', function() {
          const length = this.value.length;
          charCounter.textContent = `${length} / 140`;
          
          // 文字数に応じて色を変更
          charCounter.classList.remove('warning', 'error');
          if (length > 140) {
            charCounter.classList.add('error');
            postButton.disabled = true;
          } else if (length > 120) {
            charCounter.classList.add('warning');
            postButton.disabled = false;
          } else {
            postButton.disabled = false;
          }
        });
        
        // 概要文字数カウンター
        postDescription.addEventListener('input', function() {
          const length = this.value.length;
          descCharCounter.textContent = `${length} / 500`;
          
          // 文字数に応じて色を変更
          descCharCounter.classList.remove('warning', 'error');
          if (length > 500) {
            descCharCounter.classList.add('error');
          } else if (length > 400) {
            descCharCounter.classList.add('warning');
          }
        });
        
        // ファイル選択
        mediaInput.addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (file) {
            handleFileSelect(file);
          }
        });
        
        // ドラッグ＆ドロップ
        mediaUpload.addEventListener('dragover', function(e) {
          e.preventDefault();
          this.classList.add('dragover');
        });
        
        mediaUpload.addEventListener('dragleave', function(e) {
          e.preventDefault();
          this.classList.remove('dragover');
        });
        
        mediaUpload.addEventListener('drop', function(e) {
          e.preventDefault();
          this.classList.remove('dragover');
          
          const file = e.dataTransfer.files[0];
          if (file && file.type.startsWith('video/')) {
            handleFileSelect(file);
          }
        });
        
        // ファイル処理
        function handleFileSelect(file) {
          if (file.size > 512 * 1024 * 1024) { // 512MB制限
            showStatus('動画ファイルは512MB以下にしてください', 'error');
            return;
          }
          
          selectedFile = file;
          const url = URL.createObjectURL(file);
          previewVideo.src = url;
          mediaPreview.style.display = 'block';
          
          // アップロードラベルを非表示
          mediaUpload.querySelector('.media-upload-label').style.display = 'none';
        }
        
        // メディア削除
        removeMedia.addEventListener('click', function() {
          selectedFile = null;
          previewVideo.src = '';
          mediaPreview.style.display = 'none';
          mediaInput.value = '';
          mediaUpload.querySelector('.media-upload-label').style.display = 'flex';
        });
        
        // クリアボタン
        clearButton.addEventListener('click', function() {
          postText.value = '';
          charCounter.textContent = '0 / 140';
          charCounter.classList.remove('warning', 'error');
          postDescription.value = '';
          descCharCounter.textContent = '0 / 500';
          descCharCounter.classList.remove('warning', 'error');
          enableThread.checked = false;
          descriptionGroup.style.display = 'none';
          selectedFile = null;
          previewVideo.src = '';
          mediaPreview.style.display = 'none';
          mediaInput.value = '';
          mediaUpload.querySelector('.media-upload-label').style.display = 'flex';
          statusMessage.style.display = 'none';
        });
        
        // 投稿ボタン
        postButton.addEventListener('click', async function() {
          const text = postText.value.trim();
          const description = postDescription.value.trim();
          
          if (!text && !selectedFile) {
            showStatus('投稿内容を入力してください', 'error');
            return;
          }
          
          // ボタンを無効化してローディング表示
          postButton.disabled = true;
          postButton.innerHTML = '<span class="loading-text">投稿中...</span>';
          
          try {
            // 設定が読み込まれていない場合は再読み込み
            if (apiBaseUrl === '') {
              await loadConfig();
            }
            
            const formData = new FormData();
            formData.append('text', text);
            formData.append('description', description);
            formData.append('enableThread', enableThread.checked);
            formData.append('account', accountSelect.value);
            
            if (selectedFile) {
              formData.append('media', selectedFile);
            }
            
            // 環境設定からAPIサーバーURLを構築
            const apiUrl = apiBaseUrl ? `${apiBaseUrl}/api/x-post` : '/api/x-post';
            const response = await fetch(apiUrl, {
              method: 'POST',
              body: formData
            });
            
            if (response.ok) {
              const result = await response.json();
              
              if (result.success) {
                let message = '🎉 投稿が完了しました！';
                if (result.url) {
                  message += ` <a href="${result.url}" target="_blank" style="color: #1da1f2; text-decoration: underline;">投稿を見る →</a>`;
                }
                if (result.mainTweetId) {
                  message += ` (ID: ${result.mainTweetId})`;
                }
                // フォームを先にクリア
                clearButton.click();
                // その後でステータスメッセージ表示
                showStatus(message, 'success');
              } else {
                showStatus(result.error || '投稿に失敗しました', 'error');
              }
            } else {
              showStatus(`投稿エラー: ${response.status} ${response.statusText}`, 'error');
            }
          } catch (error) {
            console.error('投稿エラー:', error);
            showStatus('ネットワークエラーが発生しました', 'error');
          } finally {
            // ボタンを再有効化
            postButton.disabled = false;
            postButton.innerHTML = '投稿する';
          }
        });
        
        // ステータスメッセージ表示
        function showStatus(message, type) {
          statusMessage.innerHTML = message;
          statusMessage.className = `status-message ${type}`;
          statusMessage.style.display = 'block';
        }
      })();
    </script>